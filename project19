import random
import time
import os
import logging

# Set up logging configuration
logging.basicConfig(filename="game_logs.txt", level=logging.INFO, format="%(asctime)s - %(message)s")

# Class to represent the game state and logic
class GuessingGame:
    def __init__(self):
        self.target_number = random.randint(1, 100)
        self.max_attempts = 10
        self.attempts_left = self.max_attempts
        self.score = 0

    def start_game(self):
        print("Welcome to the Number Guessing Game!")
        print(f"Guess a number between 1 and 100. You have {self.max_attempts} attempts.")
        while self.attempts_left > 0:
            try:
                guess = int(input(f"Attempts left: {self.attempts_left}. Enter your guess: "))
                self.attempts_left -= 1
                if guess < self.target_number:
                    print("Too low!")
                elif guess > self.target_number:
                    print("Too high!")
                else:
                    print(f"Congratulations! You guessed the number {self.target_number}.")
                    self.score = 100 - (self.attempts_left * 10)
                    print(f"Your score: {self.score}")
                    break
            except ValueError:
                print("Invalid input! Please enter a valid integer.")
        else:
            print(f"Sorry, you've used all attempts. The correct number was {self.target_number}.")
            logging.info(f"Game over. Final score: {self.score}")
        
        self.save_score()

    def save_score(self):
        with open("scores.txt", "a") as score_file:
            score_file.write(f"Score: {self.score}\n")

# Function to display menu and handle user selection
def display_menu():
    print("\n==== Main Menu ====")
    print("1. Start New Game")
    print("2. View High Scores")
    print("3. Exit")
    
    try:
        choice = int(input("Enter your choice (1-3): "))
        if choice == 1:
            game = GuessingGame()
            game.start_game()
        elif choice == 2:
            view_scores()
        elif choice == 3:
            print("Goodbye!")
            exit()
        else:
            print("Invalid choice. Please choose between 1 and 3.")
            display_menu()
    except ValueError:
        print("Invalid input! Please enter a number between 1 and 3.")
        display_menu()

# Function to display high scores
def view_scores():
    print("\n==== High Scores ====")
    if os.path.exists("scores.txt"):
        with open("scores.txt", "r") as score_file:
            scores = score_file.readlines()
            if scores:
                print("Top Scores:")
                for score in scores:
                    print(score.strip())
            else:
                print("No scores available yet.")
    else:
        print("No scores file found.")
    display_menu()

# Function to perform math operations
def math_operations():
    print("\n==== Math Operations ====")
    try:
        number1 = float(input("Enter the first number: "))
        number2 = float(input("Enter the second number: "))
        print("Select operation: +, -, *, /")
        operation = input("Enter operation: ")
        
        if operation == "+":
            result = number1 + number2
        elif operation == "-":
            result = number1 - number2
        elif operation == "*":
            result = number1 * number2
        elif operation == "/":
            if number2 == 0:
                print("Error: Division by zero.")
                return
            result = number1 / number2
        else:
            print("Invalid operation!")
            return
        
        print(f"The result is: {result}")
        logging.info(f"Math operation result: {result}")
    except ValueError:
        print("Invalid number entered.")
    finally:
        display_menu()

# Function to start a countdown timer
def start_timer():
    print("\n==== Countdown Timer ====")
    try:
        seconds = int(input("Enter time in seconds: "))
        print(f"Starting timer for {seconds} seconds...")
        for i in range(seconds, 0, -1):
            print(f"Time remaining: {i} seconds")
            time.sleep(1)
        print("Time's up!")
        logging.info(f"Countdown timer finished for {seconds} seconds.")
    except ValueError:
        print("Invalid input! Please enter a valid number of seconds.")
    finally:
        display_menu()

# Function to perform random number generation task
def random_number_task():
    print("\n==== Random Number Generation ====")
    try:
        low = int(input("Enter the lower bound: "))
        high = int(input("Enter the upper bound: "))
        if low >= high:
            print("Error: Lower bound must be less than the upper bound.")
            return
        random_number = random.randint(low, high)
        print(f"Random number between {low} and {high} is: {random_number}")
        logging.info(f"Generated random number: {random_number}")
    except ValueError:
        print("Invalid input! Please enter valid numbers.")
    finally:
        display_menu()

# Main function to start the program
def main():
    while True:
        display_menu()

# Execute the program
if __name__ == "__main__":
    main()

# Function to print the Tic-Tac-Toe board
def print_board(board):
    print("\n")
    for i in range(3):
        print(" | ".join(board[i]))
        if i < 2:
            print("-" * 5)
    print("\n")

# Function to check if a player has won
def check_win(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all([cell == player for cell in board[i]]):  # Check row
            return True
        if all([board[j][i] == player for j in range(3)]):  # Check column
            return True
    
    # Check diagonals
    if all([board[i][i] == player for i in range(3)]):
        return True
    if all([board[i][2-i] == player for i in range(3)]):
        return True
    
    return False

# Function to check if the board is full
def check_full(board):
    return all(cell != " " for row in board for cell in row)

# Function to handle the player's turn
def player_turn(board, player):
    while True:
        try:
            move = int(input(f"Player {player}, enter your move (1-9): "))
            if move < 1 or move > 9:
                print("Invalid move! Please choose a number between 1 and 9.")
                continue
            row, col = divmod(move - 1, 3)
            if board[row][col] == " ":
                board[row][col] = player
                break
            else:
                print("This spot is already taken. Try again.")
        except ValueError:
            print("Invalid input! Please enter a number between 1 and 9.")

# Function to play the Tic-Tac-Toe game
def tic_tac_toe():
    # Initialize the empty board
    board = [[" " for _ in range(3)] for _ in range(3)]

    # Player symbols
    players = ["X", "O"]
    turn = 0

    # Game loop
    while True:
        print_board(board)
        
        # Handle current player's turn
        player = players[turn % 2]
        player_turn(board, player)
        
        # Check if the current player has won
        if check_win(board, player):
            print_board(board)
            print(f"Player {player} wins!")
            break
        
        # Check if the game is a draw
        if check_full(board):
            print_board(board)
            print("It's a draw!")
            break
        
        # Switch to the other player
        turn += 1

# Run the game
if __name__ == "__main__":
    tic_tac_toe()

import pygame
import random
import sys

# Initialize Pygame
pygame.init()

# Set game parameters
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 600
FPS = 60
GRAVITY = 0.5
JUMP_STRENGTH = -10
PIPE_WIDTH = 50
PIPE_GAP = 150
BIRD_WIDTH = 40
BIRD_HEIGHT = 40

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Set up the screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Flapper Zero")

# Load images (you can use your own images for the bird and pipes if desired)
bird_image = pygame.Surface((BIRD_WIDTH, BIRD_HEIGHT))
bird_image.fill(BLUE)

# Bird class to handle its movement and drawing
class Bird:
    def __init__(self):
        self.x = 50
        self.y = SCREEN_HEIGHT // 2
        self.vel_y = 0

    def jump(self):
        self.vel_y = JUMP_STRENGTH

    def move(self):
        self.vel_y += GRAVITY
        self.y += self.vel_y
        if self.y < 0:
            self.y = 0
        elif self.y > SCREEN_HEIGHT - BIRD_HEIGHT:
            self.y = SCREEN_HEIGHT - BIRD_HEIGHT

    def draw(self):
        screen.blit(bird_image, (self.x, self.y))

# Pipe class to handle the pipes
class Pipe:
    def __init__(self):
        self.x = SCREEN_WIDTH
        self.height = random.randint(100, SCREEN_HEIGHT - PIPE_GAP - 100)
        self.top_rect = pygame.Rect(self.x, 0, PIPE_WIDTH, self.height)
        self.bottom_rect = pygame.Rect(self.x, self.height + PIPE_GAP, PIPE_WIDTH, SCREEN_HEIGHT - self.height - PIPE_GAP)

    def move(self):
        self.x -= 5
        self.top_rect.x = self.x
        self.bottom_rect.x = self.x

    def draw(self):
        pygame.draw.rect(screen, GREEN, self.top_rect)
        pygame.draw.rect(screen, GREEN, self.bottom_rect)

    def off_screen(self):
        return self.x < -PIPE_WIDTH

# Function to detect collision
def check_collision(bird, pipes):
    bird_rect = pygame.Rect(bird.x, bird.y, BIRD_WIDTH, BIRD_HEIGHT)
    for pipe in pipes:
        if bird_rect.colliderect(pipe.top_rect) or bird_rect.colliderect(pipe.bottom_rect):
            return True
    return False

# Function to reset the game
def reset_game():
    bird = Bird()
    pipes = [Pipe()]
    score = 0
    return bird, pipes, score

# Main game loop
def game():
    bird = Bird()
    pipes = [Pipe()]
    score = 0
    clock = pygame.time.Clock()
    running = True
    while running:
        screen.fill(WHITE)

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    bird.jump()

        # Move the bird
        bird.move()

        # Move and draw pipes
        if pipes[-1].x < SCREEN_WIDTH - 200:
            pipes.append(Pipe())
        for pipe in pipes:
            pipe.move()
            pipe.draw()
        pipes = [pipe for pipe in pipes if not pipe.off_screen()]

        # Draw the bird
        bird.draw()

        # Check for collisions
        if check_collision(bird, pipes):
            bird, pipes, score = reset_game()

        # Update the score
        score += 1
        score_text = pygame.font.SysFont(None, 30).render(f"Score: {score}", True, BLACK)
        screen.blit(score_text, (10, 10))

        # Update the screen
        pygame.display.update()

        # Frame rate
        clock.tick(FPS)

    pygame.quit()
    sys.exit()

# Start the game
if __name__ == "__main__":
    game()

import random

def guess_the_number():
    print("Welcome to 'Guess the Number'!")
    print("I'm thinking of a number between 1 and 100.")
    
    # Generate a random number between 1 and 100
    number_to_guess = random.randint(1, 100)
    
    # Initialize variables
    attempts = 0
    guessed = False
    
    while not guessed:
        # Get the player's guess
        try:
            player_guess = int(input("Enter your guess: "))
            attempts += 1
            
            # Check if the guess is correct
            if player_guess < number_to_guess:
                print("Too low! Try again.")
            elif player_guess > number_to_guess:
                print("Too high! Try again.")
            else:
                print(f"Congratulations! You've guessed the number {number_to_guess} in {attempts} attempts.")
                guessed = True  # The game ends when the correct guess is made
        except ValueError:
            print("Please enter a valid integer.")

# Start the game
if __name__ == "__main__":
    guess_the_number()
import random

# List of words for the game
word_list = ["python", "java", "hangman", "programming", "developer", "challenge", "computer"]

# Function to display the current state of the word
def display_word(word, guessed_letters):
    return "".join([letter if letter in guessed_letters else "_" for letter in word])

# Function to play the game
def hangman():
    print("Welcome to Hangman!")
    
    # Select a random word from the list
    word = random.choice(word_list)
    guessed_letters = set()  # To keep track of guessed letters
    wrong_guesses = 0         # Counter for wrong guesses
    max_wrong_guesses = 6      # Max wrong guesses before losing
    
    while wrong_guesses < max_wrong_guesses:
        # Show the current state of the word
        print(f"Current word: {display_word(word, guessed_letters)}")
        print(f"Wrong guesses left: {max_wrong_guesses - wrong_guesses}")
        
        # Ask the player for a guess
        guess = input("Guess a letter: ").lower()
        
        # Check if the guess is valid (one letter and alphabetic)
        if len(guess) != 1 or not guess.isalpha():
            print("Please enter a valid letter (one letter only).")
            continue
        
        # Check if the letter has already been guessed
        if guess in guessed_letters:
            print("You've already guessed that letter. Try again.")
            continue
        
        # Add the guessed letter to the set
        guessed_letters.add(guess)
        
        # Check if the guessed letter is in the word
        if guess in word:
            print(f"Good guess! The letter '{guess}' is in the word.")
        else:
            wrong_guesses += 1
            print(f"Oops! The letter '{guess}' is not in the word.")
        
        # Check if the player has guessed all letters
        if all(letter in guessed_letters for letter in word):
            print(f"Congratulations! You've guessed the word: {word}")
            break
    else:
        print(f"Sorry, you've run out of guesses. The word was: {word}")

# Start the game
if __name__ == "__main__":
    hangman()
import random

# List of words for the game
word_list = ["python", "java", "hangman", "programming", "developer", "challenge", "computer"]

# Function to display the current state of the word
def display_word(word, guessed_letters):
    return "".join([letter if letter in guessed_letters else "_" for letter in word])

# Function to play the game
def hangman():
    print("Welcome to Hangman!")
    
    # Select a random word from the list
    word = random.choice(word_list)
    guessed_letters = set()  # To keep track of guessed letters
    wrong_guesses = 0         # Counter for wrong guesses
    max_wrong_guesses = 6      # Max wrong guesses before losing
    
    while wrong_guesses < max_wrong_guesses:
        # Show the current state of the word
        print(f"Current word: {display_word(word, guessed_letters)}")
        print(f"Wrong guesses left: {max_wrong_guesses - wrong_guesses}")
        
        # Ask the player for a guess
        guess = input("Guess a letter: ").lower()
        
        # Check if the guess is valid (one letter and alphabetic)
        if len(guess) != 1 or not guess.isalpha():
            print("Please enter a valid letter (one letter only).")
            continue
        
        # Check if the letter has already been guessed
        if guess in guessed_letters:
            print("You've already guessed that letter. Try again.")
            continue
        
        # Add the guessed letter to the set
        guessed_letters.add(guess)
        
        # Check if the guessed letter is in the word
        if guess in word:
            print(f"Good guess! The letter '{guess}' is in the word.")
        else:
            wrong_guesses += 1
            print(f"Oops! The letter '{guess}' is not in the word.")
        
        # Check if the player has guessed all letters
        if all(letter in guessed_letters for letter in word):
            print(f"Congratulations! You've guessed the word: {word}")
            break
    else:
        print(f"Sorry, you've run out of guesses. The word was: {word}")

# Start the game
if __name__ == "__main__":
    hangman()

